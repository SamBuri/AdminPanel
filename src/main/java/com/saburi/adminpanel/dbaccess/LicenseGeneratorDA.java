/*
 Sam Buriima
generated by Saburi Tools
 */
package com.saburi.adminpanel.dbaccess;

import com.saburi.adminpanel.entities.LicenseGenerator;
import javafx.beans.property.*;
import java.util.ArrayList;
import com.saburi.common.entities.AppRevisionEntity;
import java.util.List;
import com.saburi.common.utils.SearchColumn;
import com.saburi.common.utils.SearchColumn.SearchDataTypes;
import org.hibernate.envers.RevisionType;
import com.saburi.common.dbaccess.DBAccess;
import com.saburi.common.dbaccess.IDGeneratorDA;
import static com.saburi.common.utils.Utilities.formatInteger;
import com.saburi.common.utils.CommonEnums.LicenseTypes;
import com.saburi.common.utils.SaburiEncryptor;
import java.time.LocalDate;
import static com.saburi.common.utils.Utilities.formatDate;

public class LicenseGeneratorDA extends DBAccess {

    private LicenseGenerator licenseGenerator = new LicenseGenerator();
    private final SimpleIntegerProperty idHelper = new SimpleIntegerProperty(this, "idHelper");
    private final SimpleStringProperty idHelperDisplay = new SimpleStringProperty(this, "idHelperDisplay");
    private final SimpleStringProperty licenseNo = new SimpleStringProperty(this, "licenseNo");
    private final SimpleStringProperty details = new SimpleStringProperty(this, "details");
    private final SimpleObjectProperty licenseType = new SimpleObjectProperty(this, "licenseType");
    private final SimpleObjectProperty startDate = new SimpleObjectProperty(this, "startDate");
    private final SimpleStringProperty startDateDisplay = new SimpleStringProperty(this, "startDateDisplay");
    private final SimpleObjectProperty endDate = new SimpleObjectProperty(this, "endDate");
    private final SimpleStringProperty endDateDisplay = new SimpleStringProperty(this, "endDateDisplay");
    private final SimpleIntegerProperty userLimit = new SimpleIntegerProperty(this, "userLimit");
    private final SimpleStringProperty userLimitDisplay = new SimpleStringProperty(this, "userLimitDisplay");
    private final SimpleIntegerProperty recordLimit = new SimpleIntegerProperty(this, "recordLimit");
    private final SimpleStringProperty recordLimitDisplay = new SimpleStringProperty(this, "recordLimitDisplay");
    private final SimpleStringProperty baseTable = new SimpleStringProperty(this, "baseTable");

    public LicenseGeneratorDA() {
        createSearchColumns();
    }

    public LicenseGeneratorDA(String persistenceUnit) {
        super(persistenceUnit);
    }

    public LicenseGeneratorDA(LicenseGenerator licenseGenerator) {
        this.licenseGenerator = licenseGenerator;
        initialseProprties();
        createSearchColumns();
    }

    public LicenseGeneratorDA(String persistenceUnit, LicenseGenerator licenseGenerator) {
        super(persistenceUnit);
        this.licenseGenerator = licenseGenerator;
        initialseProprties();
        createSearchColumns();
    }

    public LicenseGeneratorDA(String licenseNo, String details, LicenseTypes licenseType, LocalDate startDate, LocalDate endDate, int userLimit, int recordLimit, String baseTable) {
        this.licenseGenerator = new LicenseGenerator(getNextIdHelper(), licenseNo, details, licenseType, startDate, endDate, userLimit, recordLimit, baseTable);
        initialseProprties();
        createSearchColumns();
    }

    public LicenseGeneratorDA(String persistenceUnit, String licenseNo, String details, LicenseTypes licenseType, LocalDate startDate, LocalDate endDate, int userLimit, int recordLimit, String baseTable) {
        super(persistenceUnit);
        this.licenseGenerator = new LicenseGenerator(getNextIdHelper(), licenseNo, details, licenseType, startDate, endDate, userLimit, recordLimit, baseTable);
        initialseProprties();
        createSearchColumns();
    }

    public int getIdHelper() {
        return idHelper.get();
    }

    public String getIdHelperDisplay() {
        return idHelperDisplay.get();
    }

    public void setIdHelper(int idHelper) {
        licenseGenerator.setIdHelper(idHelper);
        this.idHelper.set(idHelper);
    }

    public String getLicenseNo() {
        return licenseNo.get();
    }

    public void setLicenseNo(String licenseNo) {
        licenseGenerator.setLicenseNo(licenseNo);
        this.licenseNo.set(licenseNo);
    }

    public String getDetails() {
        return details.get();
    }

    public void setDetails(String details) {
        licenseGenerator.setDetails(details);
        this.details.set(details);
    }

    public Object getLicenseType() {
        return licenseType.get();
    }

    public void setLicenseType(LicenseTypes licenseType) {
        licenseGenerator.setLicenseType(licenseType);
        this.licenseType.set(licenseType);
    }

    public Object getStartDate() {
        return startDate.get();
    }

    public String getStartDateDisplay() {
        return startDateDisplay.get();
    }

    public void setStartDate(LocalDate startDate) {
        licenseGenerator.setStartDate(startDate);
        this.startDate.set(startDate);
    }

    public Object getEndDate() {
        return endDate.get();
    }

    public String getEndDateDisplay() {
        return endDateDisplay.get();
    }

    public void setEndDate(LocalDate endDate) {
        licenseGenerator.setEndDate(endDate);
        this.endDate.set(endDate);
    }

    public int getUserLimit() {
        return userLimit.get();
    }

    public String getUserLimitDisplay() {
        return userLimitDisplay.get();
    }

    public void setUserLimit(int userLimit) {
        licenseGenerator.setUserLimit(userLimit);
        this.userLimit.set(userLimit);
    }

    public int getRecordLimit() {
        return recordLimit.get();
    }

    public String getRecordLimitDisplay() {
        return recordLimitDisplay.get();
    }

    public void setRecordLimit(int recordLimit) {
        licenseGenerator.setRecordLimit(recordLimit);
        this.recordLimit.set(recordLimit);
    }

    public String getBaseTable() {
        return baseTable.get();
    }

    public void setBaseTable(String baseTable) {
        licenseGenerator.setBaseTable(baseTable);
        this.baseTable.set(baseTable);
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (!(o instanceof LicenseGeneratorDA)) {
            return false;
        }

        LicenseGeneratorDA licenseGeneratorDA = (LicenseGeneratorDA) o;

        if (licenseGeneratorDA.getDBEntity() == null || this.getDBEntity() == null) {
            return false;
        }
        return this.getId().equals(licenseGeneratorDA.getId());
    }

    @Override
    public int hashCode() {
        return licenseGenerator.getId().hashCode();
    }

    private void initialseProprties() {
        this.dBEntity = licenseGenerator;
        this.idHelper.set(licenseGenerator.getIdHelper());
        this.idHelperDisplay.set(formatInteger(licenseGenerator.getIdHelper()));
        this.dBEntity = licenseGenerator;
        this.licenseNo.set(licenseGenerator.getLicenseNo());
        this.dBEntity = licenseGenerator;
        this.details.set(licenseGenerator.getDetails());
        this.dBEntity = licenseGenerator;
        this.licenseType.set(licenseGenerator.getLicenseType());
        this.dBEntity = licenseGenerator;
        this.startDate.set(licenseGenerator.getStartDate());
        this.startDateDisplay.set(formatDate(licenseGenerator.getStartDate()));
        this.dBEntity = licenseGenerator;
        this.endDate.set(licenseGenerator.getEndDate());
        this.endDateDisplay.set(formatDate(licenseGenerator.getEndDate()));
        this.dBEntity = licenseGenerator;
        this.userLimit.set(licenseGenerator.getUserLimit());
        this.userLimitDisplay.set(formatInteger(licenseGenerator.getUserLimit()));
        this.dBEntity = licenseGenerator;
        this.recordLimit.set(licenseGenerator.getRecordLimit());
        this.recordLimitDisplay.set(formatInteger(licenseGenerator.getRecordLimit()));
        this.dBEntity = licenseGenerator;
        this.baseTable.set(licenseGenerator.getBaseTable());
        initCommonProprties();
    }

    private void createSearchColumns() {
        this.searchColumns.add(new SearchColumn("licenseNo", "License No", this.licenseNo.get(), SearchDataTypes.STRING));
        this.searchColumns.add(new SearchColumn("details", "Details", this.details.get(), SearchDataTypes.STRING));
        this.searchColumns.add(new SearchColumn("licenseType", "License Type", this.licenseType.get(), SearchDataTypes.STRING, SearchColumn.SearchType.Equal));
        this.searchColumns.add(new SearchColumn("startDate", "Start Date", this.startDate.get(), startDateDisplay.get(), SearchDataTypes.DATE));
        this.searchColumns.add(new SearchColumn("endDate", "End Date", this.endDate.get(), endDateDisplay.get(), SearchDataTypes.DATE));
        this.searchColumns.add(new SearchColumn("userLimit", "User Limit", this.userLimit.get(), userLimitDisplay.get(), SearchDataTypes.INTEGER));
        this.searchColumns.add(new SearchColumn("recordLimit", "Record Limit", this.recordLimit.get(), recordLimitDisplay.get(), SearchDataTypes.INTEGER));
        this.searchColumns.add(new SearchColumn("baseTable", "Base Table", this.baseTable.get(), SearchDataTypes.STRING));
        this.searchColumns.addAll(this.getDefaultSearchColumns());
    }

    @Override
    public List<SearchColumn> getSearchColumns() {
        return this.searchColumns;
    }

    @Override
    public Object getId() {
        return this.licenseGenerator.getId();
    }

    @Override
    public String getDisplayKey() {
        return this.licenseGenerator.getDisplayKey();
    }

    public static List<LicenseGeneratorDA> getLicenseGeneratorDAs(List<LicenseGenerator> licenseGenerators) {
        List<LicenseGeneratorDA> list = new ArrayList<>();
        licenseGenerators.forEach((licenseGenerator) -> {
            list.add(new LicenseGeneratorDA(licenseGenerator));
        });
        return list;
    }

    public static List<LicenseGenerator> getLicenseGeneratorList(List<LicenseGeneratorDA> licenseGeneratorDAs) {
        List<LicenseGenerator> licenseGenerators = new ArrayList<>();
        licenseGeneratorDAs.forEach(a -> licenseGenerators.add(a.licenseGenerator));
        return licenseGenerators;
    }

    public boolean save() throws Exception {
        return super.persist(this.licenseGenerator);

    }

    public boolean update() throws Exception {
        return super.merge(this.licenseGenerator);

    }

    public boolean delete() {
        return super.remove(this.licenseGenerator);

    }

    public LicenseGenerator getLicenseGenerator(String licenseNo) {
        return (LicenseGenerator) super.find(LicenseGenerator.class, licenseNo);
    }

    public LicenseGenerator getLicenseGenerator() {
        return this.licenseGenerator;
    }

    public List<LicenseGenerator> getLicenseGenerators() {
        return super.find(LicenseGenerator.class);
    }

    @Override
    public List<DBAccess> get() {
        List<DBAccess> list = new ArrayList<>();
        selectQuery(LicenseGenerator.class).forEach(o -> list.add(new LicenseGeneratorDA((LicenseGenerator) o)));
        if (entityManager != null) {
            entityManager.close();
        }
        return list;
    }

    public LicenseGeneratorDA get(String licenseNo) throws Exception {
        LicenseGenerator oLicenseGenerator = getLicenseGenerator(licenseNo);
        if (oLicenseGenerator == null) {
            throw new Exception("No Record with id: " + licenseNo);
        }
        return new LicenseGeneratorDA(oLicenseGenerator);
    }

    public List<LicenseGeneratorDA> get(String columName, Object value) {
        List<LicenseGeneratorDA> list = new ArrayList<>();
        super.selectQuery(LicenseGenerator.class, columName, value).forEach(da -> list.add(new LicenseGeneratorDA((LicenseGenerator) da)));
        if (entityManager != null) {
            entityManager.close();
        }
        return list;
    }

    public List<LicenseGeneratorDA> toDaList(List<LicenseGenerator> licenseGenerators) {
        List<LicenseGeneratorDA> licenseGeneratorDAs = new ArrayList<>();
        licenseGenerators.forEach(s -> licenseGeneratorDAs.add(new LicenseGeneratorDA(s)));
        return licenseGeneratorDAs;
    }

    public List<DBAccess> toDBAccessList(List<LicenseGenerator> licenseGenerators) {
        List<DBAccess> dbAccesses = new ArrayList<>();
        licenseGenerators.forEach(s -> dbAccesses.add(new LicenseGeneratorDA(s)));
        return dbAccesses;
    }

    public int getMax(String columnName) {
        return super.getMax(LicenseGenerator.class, columnName);
    }

    public int getMax(String columnName, String comparatorColumn, Object comparatorVaue) {
        return super.getMax(LicenseGenerator.class, columnName, comparatorColumn, comparatorVaue);
    }

    public final int getNextIdHelper() {
        return this.getMax("idHelper") + 1;
    }

    public String getNextLicenseNo(int idHelper) {
        return new IDGeneratorDA().getToAppendString(LicenseGenerator.class.getSimpleName(), idHelper);
    }

    public List<LicenseGenerator> getLicenseGenerators(String columName, Object value) {
        return super.find(LicenseGenerator.class, columName, value);
    }

    @Override
    public List<DBAccess> getRevisions() {
        try {

            List<Object[]> list = getEntityRevisions(LicenseGenerator.class);
            List<DBAccess> dBAccesses = new ArrayList<>();
            list.forEach(e -> {

                LicenseGeneratorDA licenseGeneratorDA = new LicenseGeneratorDA((LicenseGenerator) e[0]);
                licenseGeneratorDA.revisionEntity = (AppRevisionEntity) e[1];
                licenseGeneratorDA.oRevisionType = (RevisionType) e[2];
                licenseGeneratorDA.initRevProprties();
                licenseGeneratorDA.searchColumns.addAll(licenseGeneratorDA.getRevSearchColumns());
                dBAccesses.add(licenseGeneratorDA);

            });

            return dBAccesses;
        } catch (Exception e) {
            throw e;
        } finally {
            if (entityManager == null) {
                entityManager.close();
            }
        }

    }

    public String makeLicenceText() {
        return SaburiEncryptor.encrypt(this.getLicenseNo().replace("\n", " "))
                + "\n" + SaburiEncryptor.encrypt(this.getDetails().replace("\n", " "))
                + "\n" + SaburiEncryptor.encrypt(this.getLicenseType().toString().replace("\n", " "))
                + "\n" + SaburiEncryptor.encrypt(this.getStartDate().toString().replace("\n", " "))
                + "\n" + SaburiEncryptor.encrypt(this.getEndDate().toString().replace("\n", " "))
                + "\n" + SaburiEncryptor.encrypt(String.valueOf(this.getUserLimit()).replace("\n", " "))
                + "\n" + SaburiEncryptor.encrypt(String.valueOf(this.getRecordLimit()).replace("\n", " "))
                + "\n" + SaburiEncryptor.encrypt(this.getBaseTable().replace("\n", " "));
    }

}
