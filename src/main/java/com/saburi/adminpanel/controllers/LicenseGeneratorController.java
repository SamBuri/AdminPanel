/*
 Sam Buriima
generated by Saburi Tools
 */
package com.saburi.adminpanel.controllers;

import java.net.URL;
import java.util.ResourceBundle;
import javafx.fxml.FXML;
import static com.saburi.common.utils.FXUIUtils.*;
import com.saburi.common.utils.Utilities.FormMode;
import static com.saburi.common.utils.FXUIUtils.warningOk;
import com.saburi.adminpanel.dbaccess.LicenseGeneratorDA;
import com.saburi.common.controllers.EditController;
import javafx.scene.control.TextField;
import javafx.scene.control.ComboBox;
import com.saburi.common.utils.CommonEnums.LicenseTypes;
import com.saburi.common.utils.Utilities;
import static com.saburi.common.utils.Utilities.writeFile;
import javafx.collections.FXCollections;
import javafx.scene.control.DatePicker;
import java.time.LocalDate;
import javafx.scene.control.Button;
import javafx.scene.control.CheckBox;

public class LicenseGeneratorController extends EditController {

    private final LicenseGeneratorDA oLicenseGeneratorDA = new LicenseGeneratorDA();
    @FXML
    private TextField txtLicenseNo;
    @FXML
    private TextField txtDetails;
    @FXML
    private ComboBox cboLicenseType;
    @FXML
    private DatePicker dtpStartDate;
    @FXML
    private DatePicker dtpEndDate;
    @FXML
    private TextField txtUserLimit;
    @FXML
    private TextField txtRecordLimit;
    @FXML
    private TextField txtBaseTable;
    @FXML
    private TextField txtOutputDirectory;
    @FXML
    private CheckBox chkSaveFile;
    @FXML
    private Button btnOutputDirectory;

    @Override
    public void initialize(URL url, ResourceBundle rb) {
        try {
            cboLicenseType.setItems(FXCollections.observableArrayList(LicenseTypes.values()));
            validateIteger(txtUserLimit);
            validateIteger(txtRecordLimit);
            formatInteger(txtUserLimit);
            formatInteger(txtRecordLimit);
            this.primaryKeyControl = txtLicenseNo;
            this.dbAccess = oLicenseGeneratorDA;
            this.restrainColumnConstraint = false;
            this.minSize = 450;
            this.setNextLicenseNo();
            btnOutputDirectory.setOnAction(e ->browseDirectory(txtOutputDirectory));
        } catch (Exception e) {
            errorMessage(e);
        } finally {
        }
    }

    @Override
    protected void save() {
        try {
            this.editSuccessful = false;
            String licenseNo = getText(txtLicenseNo, "License No");
            String details = getText(txtDetails, "Details");
            LicenseTypes licenseType = (LicenseTypes) getSelectedValue(cboLicenseType, "License Type");
            LocalDate startDate = getDate(dtpStartDate, "Start Date");
            LocalDate endDate = getDate(dtpEndDate, "End Date");
            int userLimit = getInt(txtUserLimit, "User Limit");
            int recordLimit = getInt(txtRecordLimit, "Record Limit");
            String baseTable = getText(txtBaseTable, "Base Table");

            LicenseGeneratorDA licenseGeneratorDA = new LicenseGeneratorDA(licenseNo, details, licenseType, startDate, endDate, userLimit, recordLimit, baseTable);
            String buttonText = btnSave.getText();
            if (chkSaveFile.isSelected()) {
                String diretory = getText(txtOutputDirectory, "Output Directory");
                String fileName = diretory.concat("\\").concat(details).concat(".txt");
                Utilities.makeDirectory(diretory);
                writeFile(fileName, licenseGeneratorDA.makeLicenceText());
            }
            if (buttonText.equalsIgnoreCase(FormMode.Save.name())) {
                licenseGeneratorDA.save();
                message("Saved Successfully");
                clear();
                this.setNextLicenseNo();
            } else if (buttonText.equalsIgnoreCase(FormMode.Update.name())) {
                licenseGeneratorDA.update();
                message("Updated Successfully");
            }
            this.dbAccess = licenseGeneratorDA;
            this.editSuccessful = true;
        } catch (Exception e) {
            errorMessage(e);
        } finally {
        }
    }

    @Override
    protected void delete() {
        try {
            String licenseNo = getText(txtLicenseNo, "License No");
            LicenseGeneratorDA licenseGeneratorDA = oLicenseGeneratorDA.get(licenseNo);
            if (!warningOk("Confirm Delete", "You are about to delete a record with ID: " + licenseNo + " Are you sure you want to continue?", "Remember this action cannot be un done")) {
                return;
            }
            if (licenseGeneratorDA.delete()) {
                message("Deleted Successfully");
            }
        } catch (Exception e) {
            errorMessage(e);
        }
    }

    @Override
    public void loadData() {
        try {
            String licenseNo = getText(txtLicenseNo, "License No");

            LicenseGeneratorDA licenseGeneratorDA = oLicenseGeneratorDA.get(licenseNo);
            txtLicenseNo.setText(licenseGeneratorDA.getLicenseNo());
            txtDetails.setText(licenseGeneratorDA.getDetails());
            cboLicenseType.setValue(licenseGeneratorDA.getLicenseType());
            dtpStartDate.setValue((LocalDate) licenseGeneratorDA.getStartDate());
            dtpEndDate.setValue((LocalDate) licenseGeneratorDA.getEndDate());
            txtUserLimit.setText(String.valueOf(licenseGeneratorDA.getUserLimit()));
            txtRecordLimit.setText(String.valueOf(licenseGeneratorDA.getRecordLimit()));
            txtBaseTable.setText(licenseGeneratorDA.getBaseTable());

        } catch (Exception e) {
            errorMessage(e);
        }

    }

    private void setNextLicenseNo() {
        try {
            if (btnSave.getText().equalsIgnoreCase(FormMode.Save.name())) {
                txtLicenseNo.setText(oLicenseGeneratorDA.getNextLicenseNo(oLicenseGeneratorDA.getNextIdHelper()));
            }
        } catch (Exception e) {
            errorMessage(e);
        }
    }

}
